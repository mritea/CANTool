package CanTool;

import serialException.TooManyListeners;
import serialPort.SerialTool;
import gnu.io.SerialPort;

public class CanTool {
	private SerialPort port; 
	private boolean flag;
	private int speed;
	
	public CanTool(SerialPort serialport){
		this.port=serialport;
		flag=false;
		speed=10;
	}
	
	public void addListener(SerialListener listener){
		try{
			SerialTool.addListener(port, listener);
			System.out.println("监听成功");
		}catch(TooManyListeners e){
			e.printStackTrace();
		}
	}
	
	public void getCommand(byte[] bytes){
		byte[] command=bytes;
		
		String command=Bytes2HexString(bytes);
	      char c=(char)command[0];
	      System.out.println("first char on command:"+c);
	      if(c=='O'&& command[1]=='1'){
	        if(checklength(c,command.length())){        //处理命令长度错误 
	          open_s();
	        }
	      }else if(c=='V'){
	        if(checklength(c,command.length())){        //处理命令长度错误 
	          Serial.println("SV2.5-HV2.0");
	        }
	      }else if(c=='C'){
	        if(checklength(c,command.length())){        //处理命令长度错误 
	          close_s();
	        }
	      }else if(c=='S'){ 
	        if(checklength(c,command.length())){        //处理命令长度错误 
	          Changespeed(command[1]);
	        }
	      }else if(c=='t' ){
	        Sendstandardframe(command);
	      }else if(c=='T' ){
	        Sendexternalframe(command);
	      }else{
	        fail();
	      }
	}
	
	/**
     * byte[] 转为16进制String
     */
    public static String Bytes2HexString(byte[] b) { 
        String ret = ""; 
        for (int i = 0; i < b.length; i++) { 
            String hex = Integer.toHexString(b[i] & 0xFF); 
            if (hex.length() == 1) { 
                hex = '0' + hex; 
            } 
            ret += hex.toUpperCase(); 
        } 
        return ret; 
    } 
	
	
	public void open_s(){
	  if(!flag){
	    flag=true;
	    //返回成功
	    success();
	    return;
	  }
	  fail();
	}
	
	public void close_s(){
	  if(flag){
	    flag=false;
	    //返回成功
	    success();
	    return;
	  }
	  fail();
	}
	
	public void Changespeed(char NO_speed){
	//  Serial.println(NO_speed);
	   if(flag){
	    int num[]={10,20,50,100,125,250,500,800,1000};
	    if(NO_speed<'0' || NO_speed>'8'){//返回错误
	      fail();
	    }else{
	      int pos_speed=(int)(NO_speed-'0');
	      speed=num[pos_speed];
	      //返回成功
	      success();
	    }
	  }else{
	    fail();
	  }
	}
	
	public void Sendstandardframe(String standardframe){
	//  Serial.println(standardframe);
	  if(Checkframe(standardframe,1)){
//		    Serial.println("向CAN总线发送该标准帧"); 
	    success();
	  }else
	    fail();
	}
	
	void Sendexternalframe(String externalframe){
	//  Serial.println(externalframe);
	  if(Checkframe(externalframe,0)){
//	    Serial.println("向CAN总线发送该扩展帧"); 
	    success();
	  }else
	    fail();
	}
	
	public void success(){
	//  Serial.print("success");
	  Serial.print("\r");
	}

	public void fail(){
	//  Serial.print("fail");
	  Serial.print(char(0x07));
	}
	
	public boolean Checkframe(String frame,int n){//n=1，标准帧；n=0，扩展帧
	  int idlen;
	  if(n==1){
	    idlen=3;
	  }else if(n==0){
	    idlen=8;
	  }
	    String id=frame.substring(1,1+idlen);
	    int length_f=Integer.parseInt(frame.substring(1+idlen,2+idlen));
	    if(length_f<0 || length_f>8)
	      return false;
	    String data=frame.substring(2+idlen,length_f*2+idlen+2);
	    String period=frame.substring(length_f*2+idlen+2,length_f*2+idlen+6);
	    float timep=0;    char temp='0';
	    //标准帧id[0]在0-0x7FF之中,扩展帧在（00000000-1FFFFFFF) 之中
	    if(n==1 && (id[0]>='8' || id[0]<'0')){
	        return false;
	    }else if(n==1 && (id[0]!='0' && id[0]!='1')){
	        return false;
	    }
	    for(int i=1;i<idlen;i++){
	      if((id[i]>'F' || id[i]<'0') || (id[i]<'A' && id[i]>'9')){
	        return false;
	      }
	    }
	    //标准帧data和周期在'0'-'F'之间
	    for(int i=2+idlen;i<length_f*2+idlen+6;i++){
	      if(frame[i]>'F' || frame[i]<'0' || (frame[i]<'A' && frame[i]>'9')){
	        return false;        
	      }
	    }
	    if(frame.length()!=(idlen+6+length_f*2)){
	      return false;
	    }else{
	      return true;
	    }
	}
	
	public boolean checklength(char NO,int len){
	    boolean result=false;
	    if(( NO=='C' || NO=='V') && len==1){
	      result=true;
	    }else if((NO=='O' || NO=='S') && len==2){
	      result=true;
	    }else{
	      fail();
	    }
	    return result;
	}
	

}
